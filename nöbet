import sqlite3
import datetime
import tkinter as tk
from tkinter import messagebox
import sqlite3
import datetime
import itertools
from tkinter import ttk
import json
import datetime as dt
from PIL import Image, ImageTk


# Veritabanı bağlantısı oluşturma
conn = sqlite3.connect('15')
conn.row_factory = sqlite3.Row
c = conn.cursor()



def takvim_olustur():
    try:
        yil = int(txt_yil.get())
    except ValueError:
        messagebox.showerror("Hata", "Geçerli bir yıl girin")
        return

    start_date = datetime.date(yil, 1, 1)
    end_date = datetime.date(yil, 12, 31)
    days = (end_date - start_date).days + 1
    dates = [start_date + datetime.timedelta(days=x) for x in range(days)]
    messagebox.showinfo("Bilgi", f"{yil} yılı için takvim oluşturuldu")

def onay_yil():
    global txt_yil
    yil = datetime.datetime.now().year
    onay = messagebox.askyesno("Onay", f"Bilgisayarınızın tarihine göre bu yıl {yil}. Bu tarihi onaylıyor musunuz?")
    if not onay:
        lbl_yil = tk.Label(window, text="Yıl")
        lbl_yil.pack()

        txt_yil = tk.Entry(window)
        txt_yil.pack()

        btn_takvim_olustur = tk.Button(window, text="Takvim Oluştur", command=takvim_olustur)
        btn_takvim_olustur.pack()
    else:
        txt_yil = tk.Entry(window)
        txt_yil.insert(0, yil)
        takvim_olustur()

window = tk.Tk()

onay_yil()

window.mainloop()


# Personel tablosunu oluşturma
c.execute('''CREATE TABLE IF NOT EXISTS personel
             (id INTEGER PRIMARY KEY, ad TEXT, soyad TEXT, rutbe TEXT, cinsiyet TEXT, sofor TEXT, puan REAL, mazeret REAL, gorev REAL, kurs REAL, yillik_izin REAL, hatud REAL, hatua REAL, nobet REAL, nobet_tarihi TEXT, mazeret1 TEXT, gorev1 TEXT, kurs1 TEXT, yillik_izin1 TEXT, hatud1 TEXT, hatua1 TEXT, nobet1 TEXT, garnizon_terk REAL, gunu_birlik_izin_yarim_gun REAL, gunu_birlik_izin_tam_gun REAL, garnizon_terk1 TEXT, gunu_birlik_izin_yarim_gun1 TEXT, gunu_birlik_izin_tam_gun1 TEXT, rbayram REAL, kbayram REAL, rbayram1 TEXT, kbayram1 TEXT, kursnob REAL, kursnob1 text)''')




# Personel Ekleme Fonksiyonu
def yeni_personel_ekle(ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk, gunu_birlik_izin_yarim_gun, gunu_birlik_izin_tam_gun, garnizon_terk1, gunu_birlik_izin_yarim_gun1, gunu_birlik_izin_tam_gun1, rbayram, kbayram, rbayram1, kbayram1):
    conn = sqlite3.connect('15')
    c = conn.cursor()
    # "personel" tablosu için sütunlar oluşturuluyor
    c.execute("""CREATE TABLE IF NOT EXISTS personel (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    ad TEXT, 
                    soyad TEXT, 
                    rutbe TEXT, 
                    cinsiyet TEXT, 
                    sofor TEXT,
                    puan REAL, 
                    mazeret REAL, 
                    gorev REAL, 
                    kurs REAL, 
                    yillik_izin REAL, 
                    hatud REAL, 
                    hatua REAL, 
                    nobet REAL,
                    nobet_tarihi TEXT,
                    mazeret1 TEXT, 
                    gorev1 TEXT, 
                    kurs1 TEXT, 
                    yillik_izin1 TEXT, 
                    hatud1 TEXT, 
                    hatua1 TEXT, 
                    nobet1 TEXT,
                    garnizon_terk REAL,
                    gunu_birlik_izin_yarim_gun REAL,
                    gunu_birlik_izin_tam_gun REAL,
                    garnizon_terk1 TEXT,
                    gunu_birlik_izin_yarim_gun1 TEXT,
                    gunu_birlik_izin_tam_gun1 TEXT,
                    rbyaram REAL,
                    kbayram REAL,
                    rbayram1 TEXT,
                    kbayram1 TEXT
                )""")
    
    # Veri ekleme
    c.execute("INSERT INTO personel (ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk, gunu_birlik_izin_yarim_gun, gunu_birlik_izin_tam_gun, garnizon_terk1, gunu_birlik_izin_yarim_gun1, gunu_birlik_izin_tam_gun1, rbayram, kbayram, rbayram1, kbayram1) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (ad, soyad, rutbe, cinsiyet, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk, gunu_birlik_izin_yarim_gun, gunu_birlik_izin_tam_gun, garnizon_terk1, gunu_birlik_izin_yarim_gun1, gunu_birlik_izin_tam_gun1, rbayram, kbayram, rbayram1, kbayram1))
    conn.commit()
    conn.close()

    # Kadın Erkek koşullarını Denetleme Fonksiyonu
def cinsiyet_kontrolet(combination, n):
    if n == 1:
        return True
    else:
        female_count = sum([1 for personel in combination if personel[4] == 'Kadın'])
        male_count = sum([1 for personel in combination if personel[4] == 'Erkek'])

        if n == 2:
            return female_count == 2 or male_count == 2
        elif n == 3:
            return (female_count == 2 and male_count == 1) or (female_count == 3) or (male_count == 3)

    return False

# Haftanıın günlerine göre puanlama Fonksiyonu görevde olan personele her gün için ayrı puan vermeyi unutma birlik dışındaki kurslar için ayrı bir puan verilecek.
def puan_hesapla(weekday):
    if weekday < 4:
        return 2
    elif weekday == 4:
        return 2.5
    elif weekday == 5:
        return 3.2
    else:
        return 3
    pass        

def etkinlikler_cakisiyor_mu(baslangic1, bitis1, baslangic2, bitis2):
    return max(baslangic1, baslangic2) <= min(bitis1, bitis2)

# Geçici veritabanındaki "personel" tablosunu ana veritabanına kopyala

def yeni_nobet_liste():
    connection = sqlite3.connect("15")
    connection.row_factory = sqlite3.Row
    cursor = connection.cursor()

    cursor.execute("SELECT * FROM personel")
    data = cursor.fetchall()

    nobet_list = []

    for row in data:
        row_dict = dict(row)
        nobet_list.append(row_dict)

    return nobet_list

def kaydet_nobet_liste(nobet_list):
    try:
        with open("nobet_list.json", "r") as infile:
            existing_data = json.load(infile)
    except FileNotFoundError:   
        existing_data = []
    
    with open("nobet_list.json", "w") as outfile:
        all_data = existing_data + nobet_list
        json.dump(all_data, outfile, default=str)

    # Başarı mesajını yazdır
    print("Nöbet başarıyla kaydedildi.")
    
    personel_list = getir_tum_personel(conn)  

    for personel in personel_list:
        ad = personel[0]
        soyad = personel[1]
        print(f"{ad} {soyad}'in etkinlik tarihleri:")
        print(get_etkinlik_tarihleri(conn, ad, soyad))


def yukle_nobet_liste():
    file_name = "nobet_list.json"  # Dosya adını "nobet_list.json" olarak değiştirin

    with open(file_name, 'r') as file:
        nobet_list = json.load(file)
    
    return nobet_list

def getir_tum_personel(conn):
    c = conn.cursor()
    c.execute("SELECT * FROM personel")
    personel_list = c.fetchall()
    return personel_list

# Verilen İsim ve Soyisime göre Etkinlik tarih aralığını belirler 

def get_etkinlik_tarihleri(conn, ad, soyad):
    c = conn.cursor()
    c.execute("SELECT baslangic_tarihi, bitis_tarihi, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk1, rbayram1, kbayram1 FROM etkinlik WHERE ad = ? AND soyad = ?", (ad, soyad))
    tarih_araliklari = c.fetchall()
    etkinlik_tarihleri = []
    for row in tarih_araliklari:
        baslangic, bitis, *other_values = row
        baslangic = datetime.datetime.strptime(baslangic, "%Y-%m-%d").date()
        bitis = datetime.datetime.strptime(bitis, "%Y-%m-%d").date()
        aralik = [baslangic + datetime.timedelta(days=i) for i in range((bitis-baslangic).days + 1)]
        etkinlik_tarihleri.extend(aralik)

        # Diğer sütunları listeye eklemek için her bir tarih için
        for tarih in aralik:
            etkinlik_tarihleri.append({
                "tarih": tarih,
                "mazeret1": other_values[0],
                "gorev1": other_values[1],
                "kurs1": other_values[2],
                "yillik_izin1": other_values[3],
                "hatud1": other_values[4],
                "hatua1": other_values[5],
                "nobet1": other_values[6],
                "garnizon_terk1": other_values[7],
                "rbayram1": other_values[8],
                "kbayram1": other_values[9],
            })

    return etkinlik_tarihleri







def kontrolet_etkinlik_tarihleri(conn, ad, soyad, date1, date2):
    etkinlik_tarihleri = get_etkinlik_tarihleri(conn, ad, soyad)
    delta = date2 - date1
    for i in range(delta.days + 1):
        current_date = date1 + datetime.timedelta(days=i)
        if current_date in etkinlik_tarihleri:
            return False
    return True





def guncelle_personel():
    temp_conn = sqlite3.connect('temp_personel.db')
    conn = sqlite3.connect('15')
    temp_c = temp_conn.cursor()
    c = conn.cursor()

    # Geçici veritabanında "personel" tablosu oluştur
    temp_c.execute('''CREATE TABLE IF NOT EXISTS personel
                     (id INTEGER PRIMARY KEY, ad TEXT, soyad TEXT, rutbe TEXT, cinsiyet TEXT, sofor TEXT, puan REAL, mazeret REAL, gorev REAL, kurs REAL, yillik_izin REAL, hatud REAL, hatua REAL, nobet REAL, nobet_tarihi TEXT, mazeret1 TEXT, gorev1 TEXT, kurs1 TEXT, yillik_izin1 TEXT, hatud1 TEXT, hatua1 TEXT, nobet1 TEXT, garnizon_terk REAL, gunu_birlik_izin_yarim_gun REAL, gunu_birlik_izin_tam_gun REAL, garnizon_terk1 TEXT, gunu_birlik_izin_yarim_gun1 TEXT, gunu_birlik_izin_tam_gun1 TEXT, rbayram REAL, kbayram REAL, rbayram1 TEXT, kbayram1 TEXT, kursnob REAL, kursnob1 TEXT)''')
    temp_conn.commit()

    # Ana veritabanındaki "personel" tablosunu geçici veritabanına kopyala
    c.execute("SELECT * FROM personel")
    personel_data = c.fetchall()
    for row in personel_data:
        # 'id' değerini kontrol et
        temp_c.execute("SELECT id FROM personel WHERE id = ?", (row[0],))
        data = temp_c.fetchone()

        if data is None:
            # Eğer 'id' değeri yoksa, yeni bir satır ekle
            temp_c.execute("INSERT INTO personel (id, ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet, nobet_tarihi, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk, gunu_birlik_izin_yarim_gun, gunu_birlik_izin_tam_gun, garnizon_terk1, gunu_birlik_izin_yarim_gun1, gunu_birlik_izin_tam_gun1, rbayram, kbayram, rbayram1, kbayram1, kursnob, kursnob1) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", row)
        else:
            # Eğer 'id' değeri varsa, mevcut satırı güncelle
            temp_c.execute('''UPDATE personel SET ad = ?, soyad = ?, rutbe = ?, cinsiyet = ?, sofor = ?, puan = ?, mazeret = ?, gorev = ?, kurs = ?, yillik_izin = ?, hatud = ?, hatua = ?, nobet = ?, nobet_tarihi = ?, mazeret1 = ?, gorev1 = ?, kurs1 = ?, yillik_izin1 = ?, hatud1 = ?, hatua1 = ?, nobet1 = ?, garnizon_terk = ?, gunu_birlik_izin_yarim_gun = ?, gunu_birlik_izin_tam_gun = ?, garnizon_terk1 = ?, gunu_birlik_izin_yarim_gun1 = ?, gunu_birlik_izin_tam_gun1 = ?, rbayram = ?, kbayram = ?, rbayram1 = ?, kbayram1 = ?, kursnob = ?, kursnob1 = ? WHERE id = ?''', row[1:] + (row[0],))

        temp_conn.commit()

    # Geçici veritabanını kapat
    temp_conn.close()

#........................................................burada başlıyor geçici veri tabanı 

def yeni_veri_tabani():
    temp_conn = sqlite3.connect(":memory:")
    temp_conn.row_factory = sqlite3.Row
    temp_c = temp_conn.cursor()
    temp_c.execute('''CREATE TABLE IF NOT EXISTS personel
             (id INTEGER PRIMARY KEY, ad TEXT, soyad TEXT, rutbe TEXT, cinsiyet TEXT, sofor TEXT, puan REAL, mazeret REAL, gorev REAL, kurs REAL, yillik_izin REAL, hatud REAL, hatua REAL, nobet REAL, nobet_tarihi TEXT, mazeret1 TEXT, gorev1 TEXT, kurs1 TEXT, yillik_izin1 TEXT, hatud1 TEXT, hatua1 TEXT, nobet1 TEXT, garnizon_terk REAL, gunu_birlik_izin_yarim_gun REAL, gunu_birlik_izin_tam_gun REAL, garnizon_terk1 TEXT, gunu_birlik_izin_yarim_gun1 TEXT, gunu_birlik_izin_tam_gun1 TEXT, rbayram REAL, kbayram REAL, rbayram1 TEXT, kbayram1 TEXT, kursnob REAL, kursnob1 TEXT)''')
    temp_conn.commit()
    return temp_conn, temp_c

temp_conn, temp_c = yeni_veri_tabani()

def yeni_veri_tabani_kopyala():
    c.execute("SELECT * FROM personel") 
    personel_data = c.fetchall()
    for row in personel_data:
        temp_c.execute("SELECT * FROM personel WHERE id = ?", (row[0],))
        data = temp_c.fetchone()

        if data is None:
            temp_c.execute("INSERT INTO personel (id, ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet, nobet_tarihi, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk, gunu_birlik_izin_yarim_gun, gunu_birlik_izin_tam_gun, garnizon_terk1, gunu_birlik_izin_yarim_gun1, gunu_birlik_izin_tam_gun1, rbayram, kbayram, rbayram1, kbayram1, kursnob, kursnob1) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", row)
        else:
            temp_c.execute("UPDATE personel SET ad = ?, soyad = ?, rutbe = ?, cinsiyet = ?, sofor = ?, puan = ?, mazeret = ?, gorev = ?, kurs = ?, yillik_izin = ?, hatud = ?, hatua = ?, nobet = ?, nobet_tarihi = ?, mazeret1 = ?, gorev1 = ?, kurs1 = ?, yillik_izin1 = ?, hatud1 = ?, hatua1 = ?, nobet1 = ?, garnizon_terk = ?, gunu_birlik_izin_yarim_gun = ?, gunu_birlik_izin_tam_gun = ?, garnizon_terk1 = ?, gunu_birlik_izin_yarim_gun1 = ?, gunu_birlik_izin_tam_gun1 = ?, rbayram = ?, kbayram = ?, rbayram1 = ?, kbayram1 = ?, kursnob = ?, kursnob1 = ? WHERE id = ?", row)
    temp_conn.commit()


yeni_veri_tabani_kopyala()
#..............................................................burada bitiyor

def yeni_nobetci_personelleri_ara(temp_conn, date1, date2, n):
    c = temp_conn.cursor()
    c.execute("SELECT * FROM personel")
    all_personel = c.fetchall()
    start_date = date1
    end_date = date2
    delta = end_date - start_date
    selected_nobetci_days = []

    last_2_days_nobetci = []
    previous_day_nobetci = []
    nobet_counts = {personel[0]: {"aylik_nobet": 0, "hafta_sonu_nobet": 0, "cumartesi_nobet": 0} for personel in all_personel}

    for i in range(delta.days + 1):
        current_date = start_date + datetime.timedelta(days=i)
        current_weekday = current_date.weekday()

        etkinlik_personeller = [personel for personel in all_personel if current_date.strftime('%Y-%m-%d') in get_etkinlik_tarihleri(temp_conn, personel[1], personel[2])]
        filtered_personel = [personel for personel in all_personel if personel[0] not in last_2_days_nobetci and current_date not in get_etkinlik_tarihleri(temp_conn, personel[1], personel[2])]


        if i >= 2:
             last_2_days_nobetci.pop(0)

        available_personel = [personel for personel in filtered_personel if personel[0] not in last_2_days_nobetci and nobet_counts[personel[0]]["aylik_nobet"] < 4 and (nobet_counts[personel[0]]["hafta_sonu_nobet"] < 2 or current_weekday < 5) and (nobet_counts[personel[0]]["cumartesi_nobet"] < 1 or current_weekday != 5)]
        if len(available_personel) < n:  # if not enough personel available, ignore the constraints
            available_personel = [personel for personel in filtered_personel if personel[0] not in last_2_days_nobetci]

        min_puan = float('inf')
        selected_nobetci = []

        for combination in itertools.combinations(available_personel, n):
            total_puan = sum([int(personel[6]) for personel in combination])

            if cinsiyet_kontrolet(combination, n):
                if total_puan < min_puan:
                    min_puan = total_puan
                    selected_nobetci = list(combination)

        # Etkinlikleri olan personelleri kontrol edin ve gerekirse 'selected_nobetci' listesini güncelleyin
        selected_nobetci = [personel for personel in selected_nobetci if personel not in etkinlik_personeller]

        # ... (rest of the code remains same)
        for personel in selected_nobetci:
            additional_points = puan_hesapla(current_weekday)
            c.execute("UPDATE personel SET nobet = nobet + 1, nobet_tarihi = ?, puan = puan + ? WHERE id = ?", (current_date, additional_points, personel[0]))
            temp_conn.commit()
            nobet_counts[personel[0]]["aylik_nobet"] += 1
            if current_weekday >= 5:  # hafta sonu
                nobet_counts[personel[0]]["hafta_sonu_nobet"] += 1
            if current_weekday == 5:  # cumartesi
                nobet_counts[personel[0]]["cumartesi_nobet"] += 1

        selected_nobetci_info = [{"ad": personel[1], "soyad": personel[2], "nobet_tarihi": str(current_date)} for personel in selected_nobetci]
        selected_nobetci_days.append(selected_nobetci_info)

        c.execute("SELECT * FROM personel")
        all_personel = c.fetchall()

        if i > 1:
            for personel in previous_day_nobetci:
                last_2_days_nobetci.remove(personel[0])

        last_2_days_nobetci = last_2_days_nobetci[n:] + [None] * (6 - len(last_2_days_nobetci))
        last_2_days_nobetci.extend([personel[0] for personel in selected_nobetci])
        previous_day_nobetci = selected_nobetci

        if current_date.month != (current_date + datetime.timedelta(days=1)).month:
            nobet_counts = {personel[0]: {"aylik_nobet": 0, "hafta_sonu_nobet": 0, "cumartesi_nobet": 0} for personel in all_personel}
    print (selected_nobetci_days)
    
    return selected_nobetci_days




def nobet_listesi_goruntule():
    try:
        nobet_list = yukle_nobet_liste()
    except FileNotFoundError:
        messagebox.showerror("Hata", "Nöbet listesi bulunamadı. Lütfen önce nöbet listesi oluşturun.")
        return

    nobet_list_window = tk.Toplevel(root)
    nobet_list_window.title("Mevcut Nöbet Listesi")

    # Yıl ve ay seçimi için etiketler ve girdi kutuları
    tk.Label(nobet_list_window, text="Nöbet Yılı (YYYY):").pack()
    entry_year = tk.Entry(nobet_list_window)
    entry_year.pack()

    tk.Label(nobet_list_window, text="Nöbet Ayı (MM):").pack()
    entry_month = tk.Entry(nobet_list_window)
    entry_month.pack()

    # Nöbet listesi için metin alanı
    text_area = tk.Text(nobet_list_window, wrap=tk.WORD)
    text_area.pack(expand=True, fill=tk.BOTH)

    # Nöbetleri göster ve Kapat butonlarını ekleyin
    btn_frame = tk.Frame(nobet_list_window)
    btn_frame.pack()
    tk.Button(btn_frame, text="Nöbetleri Göster", command=lambda: show_nobet(text_area)).pack(side=tk.LEFT, padx=5)
    tk.Button(btn_frame, text="Kapat", command=nobet_list_window.destroy).pack(side=tk.RIGHT, padx=5)

    def show_nobet(text_area):
        year = int(entry_year.get())
        month = int(entry_month.get())
        nobet_list = yukle_nobet_liste()

        filtered_nobet_list = []  # Filtrelenmiş nöbet listesi için boş bir liste

    # Belirtilen yıl ve aydaki nöbetleri filtreleyin
        for nobetci_personeller in nobet_list:
            filtered_nobetci_personeller = []  # Filtrelenmiş nöbetçi personeller için boş bir liste
            for personel in nobetci_personeller:
                nobet_tarihi = datetime.datetime.strptime(personel['nobet_tarihi'], '%Y-%m-%d')
                if nobet_tarihi.year == year and nobet_tarihi.month == month:
                   filtered_nobetci_personeller.append(personel)
            if filtered_nobetci_personeller:
               filtered_nobet_list.append(filtered_nobetci_personeller)

    # Dönüştürülmüş ve filtrelenmiş nöbet listesini metin alanına yazdırın
        text_area.delete('1.0', tk.END)
        for day, nobetci_personeller in enumerate(filtered_nobet_list, start=1):
            text_area.insert(tk.END, f"{day}. Gün:\n")
            text_area.insert(tk.END, "\n".join([f"Ad: {personel['ad']}, Soyad: {personel['soyad']}, Nöbet Tarihi: {personel['nobet_tarihi']}" for personel in nobetci_personeller]))
            text_area.insert(tk.END, "\n\n")

        print("Nöbetler gösterildi.")


def main():
    
    
    def personel_listesi():
          personel_window = tk.Toplevel(root)
          personel_window.title("Personel Listesi")

          conn = sqlite3.connect('15')
          c = conn.cursor()
          c.execute("SELECT * FROM personel")
          personel_list = c.fetchall()
          conn.close()

          frame = tk.Frame(personel_window)
          frame.pack(padx=10, pady=10)

          tree = ttk.Treeview(frame, columns=('Ad', 'Soyad', 'Rütbe', 'Cinsiyet', 'Şöför', 'Puan', 'Mazeret', 'Görev', 'Kurs', 'Yıllık İzin', 'Hatu D.', 'Hatu A.', 'Nöbet'), show='headings')
          tree.heading('Ad', text='Ad')
          tree.heading('Soyad', text='Soyad')
          tree.heading('Rütbe', text='Rütbe')
          tree.heading('Cinsiyet', text='Cinsiyet')
          tree.heading('Şöför', text='Şöför')
          tree.heading('Puan', text='Puan')
          tree.heading('Mazeret', text='Mazeret')
          tree.heading('Görev', text='Görev')
          tree.heading('Kurs', text='Kurs')
          tree.heading('Yıllık İzin', text='Yıllık İzin')
          tree.heading('Hatu D.', text='Hatu D.')
          tree.heading('Hatu A.', text='Hatu A.')
          tree.heading('Nöbet', text='Nöbet')
          tree.column('Ad', anchor='center')
          tree.column('Soyad', anchor='center')
          tree.column('Rütbe', anchor='center')
          tree.column('Cinsiyet', anchor='center')
          tree.column('Puan', anchor='center')
          tree.column('Mazeret', anchor='center')
          tree.column('Görev', anchor='center')
          tree.column('Kurs', anchor='center')
          tree.column('Yıllık İzin', anchor='center')
          tree.column('Hatu D.', anchor='center')
          tree.column('Hatu A.', anchor='center')
          tree.column('Nöbet', anchor='center')

          for personel in personel_list:
              tree.insert('', 'end', values=(personel[1], personel[2], personel[3], personel[4], personel[5], personel[6], personel[7], personel[8], personel[9], personel[10], personel[11], personel[12],personel[13]))

            # Kaydırma çubuklarını oluşturun
          yscrollbar = ttk.Scrollbar(frame, orient='vertical', command=tree.yview)
          xscrollbar = ttk.Scrollbar(frame, orient='horizontal', command=tree.xview)

          # Kaydırma çubuklarını Treeview'a bağlayın
          tree.configure(xscrollcommand=xscrollbar.set, yscrollcommand=yscrollbar.set)

          tree.grid(row=0, column=0, sticky='nsew')
          yscrollbar.grid(row=0, column=1, sticky='ns')
          xscrollbar.grid(row=1, column=0, sticky='ew')

          frame.grid_rowconfigure(0, weight=1)
          frame.grid_columnconfigure(0, weight=1)


            

    def yeni_personel_ekle():
        def personel_kaydet():
            ad = entry_ad.get()
            soyad = entry_soyad.get()
            rutbe = entry_rutbe.get()
            cinsiyet = combobox_cinsiyet.get()
            sofor = combobox_sofor.get()
            puan = float(entry_puan.get())
            mazeret = int(entry_mazeret.get())
            gorev = int(entry_gorev.get())
            kurs = int(entry_kurs.get())       
            nobet = int(entry_nobet.get())
            yillik_izin = int(entry_yillik_izin.get())
            hatud = int(entry_hatud.get())
            hatua = int(entry_hatua.get())
            conn = sqlite3.connect('15')
            c = conn.cursor()
            c.execute("INSERT INTO personel (ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet))
            conn.commit()
            conn.close()

            messagebox.showinfo("Başarılı", "Personel başarıyla eklendi.")
            personel_ekle_window.destroy()

        personel_ekle_window = tk.Toplevel(root)
        personel_ekle_window.title("Yeni Personel Ekle")

        tk.Label(personel_ekle_window, text="Ad:").grid(row=0, column=0)
        entry_ad = tk.Entry(personel_ekle_window)
        entry_ad.grid(row=0, column=1)

        tk.Label(personel_ekle_window, text="Soyad:").grid(row=1, column=0)
        entry_soyad = tk.Entry(personel_ekle_window)
        entry_soyad.grid(row=1, column=1)

        tk.Label(personel_ekle_window, text="Rütbe:").grid(row=2, column=0)
        entry_rutbe = tk.Entry(personel_ekle_window)
        entry_rutbe.grid(row=2, column=1)

        tk.Label(personel_ekle_window, text="Cinsiyet:").grid(row=3, column=0)
        combobox_cinsiyet = ttk.Combobox(personel_ekle_window)
        combobox_cinsiyet['values'] = ('Erkek', 'Kadın')
        combobox_cinsiyet.grid(row=3, column=1)

        tk.Label(personel_ekle_window, text="Şöför mü:").grid(row=3, column=0)
        combobox_sofor = ttk.Combobox(personel_ekle_window)
        combobox_sofor['values'] = ('Evet', 'Hayır')
        combobox_sofor.grid(row=4, column=1)

        tk.Label(personel_ekle_window, text="Puan:").grid(row=4, column=0)
        entry_puan = tk.Entry(personel_ekle_window)
        entry_puan.grid(row=5, column=1)

        tk.Label(personel_ekle_window, text="Mazeret:").grid(row=5, column=0)
        entry_mazeret = tk.Entry(personel_ekle_window)
        entry_mazeret.grid(row=6, column=1)

        tk.Label(personel_ekle_window, text="Görev:").grid(row=6, column=0)
        entry_gorev = tk.Entry(personel_ekle_window)
        entry_gorev.grid(row=7, column=1)

        tk.Label(personel_ekle_window, text="Kurs:").grid(row=7, column=0)
        entry_kurs = tk.Entry(personel_ekle_window)
        entry_kurs.grid(row=8, column=1)
        
        tk.Label(personel_ekle_window, text="Nöbet:").grid(row=8, column=0)
        entry_nobet = tk.Entry(personel_ekle_window)
        entry_nobet.grid(row=9, column=1)

        tk.Label(personel_ekle_window, text="Yıllık İzin:").grid(row=9, column=0)
        entry_yillik_izin = tk.Entry(personel_ekle_window)
        entry_yillik_izin.grid(row=10, column=1)

        tk.Label(personel_ekle_window, text="Hatu D.:").grid(row=10, column=0)
        entry_hatud = tk.Entry(personel_ekle_window)
        entry_hatud.grid(row=11, column=1)

        tk.Label(personel_ekle_window, text="Hatu A.:").grid(row=11, column=0)
        entry_hatua = tk.Entry(personel_ekle_window)
        entry_hatua.grid(row=12, column=1)

        tk.Button(personel_ekle_window, text="Kaydet", command=personel_kaydet).grid(row=13, column=0, columnspan=2, pady=10)
    
    
    def etkinlik_cikar():
        def cikar():
            ad = entry_ad.get()
            soyad = entry_soyad.get()
            baslangic_tarihi = entry_baslangic_tarihi.get()
            bitis_tarihi = entry_bitis_tarihi.get()

            conn = sqlite3.connect('15')
            c = conn.cursor()

             # get the etkinlik type and duration from the etkinlik table before deleting
            c.execute("SELECT mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1 FROM etkinlik WHERE ad=? AND soyad=? AND baslangic_tarihi=? AND bitis_tarihi=?", (ad, soyad, baslangic_tarihi, bitis_tarihi))
            etkinlik = c.fetchone()
            etkinlik_type = [i for i in range(len(etkinlik)) if etkinlik[i] is not None][0]  # index of the non-None value
            etkinlik_duration = etkinlik[etkinlik_type]
            etkinlik_type = ['mazeret', 'gorev', 'kurs', 'yillik_izin', 'hatud', 'hatua', 'garnizon_terk', 'rbayram', 'kbayram'][etkinlik_type]  # get the corresponding etkinlik type

            c.execute("DELETE from etkinlik WHERE ad=? AND soyad=? AND baslangic_tarihi=? AND bitis_tarihi=?", (ad, soyad, baslangic_tarihi, bitis_tarihi))

            # reduce the duration of the etkinlik from the personel table
            c.execute("UPDATE personel SET {} = {} - ? WHERE ad = ? AND soyad = ?".format(etkinlik_type, etkinlik_type), (etkinlik_duration, ad, soyad))

            conn.commit()
            conn.close()

            messagebox.showinfo("Başarılı", "Etkinlik başarıyla çıkarıldı.")
            etkinlik_cikar_window.destroy()

    


        etkinlik_cikar_window = tk.Toplevel(root)
        etkinlik_cikar_window.title("Etkinlik Çıkar")

        tk.Label(etkinlik_cikar_window, text="Ad:").grid(row=0, column=0)
        entry_ad = tk.Entry(etkinlik_cikar_window)
        entry_ad.grid(row=0, column=1)

        tk.Label(etkinlik_cikar_window, text="Soyad:").grid(row=1, column=0)
        entry_soyad = tk.Entry(etkinlik_cikar_window)
        entry_soyad.grid(row=1, column=1)

        tk.Label(etkinlik_cikar_window, text="Başlangıç Tarihi (YYYY-MM-DD):").grid(row=2, column=0)
        entry_baslangic_tarihi = tk.Entry(etkinlik_cikar_window)
        entry_baslangic_tarihi.grid(row=2, column=1)

        tk.Label(etkinlik_cikar_window, text="Bitiş Tarihi (YYYY-MM-DD):").grid(row=3, column=0)
        entry_bitis_tarihi = tk.Entry(etkinlik_cikar_window)
        entry_bitis_tarihi.grid(row=3, column=1)

        tk.Button(etkinlik_cikar_window, text="Çıkar", command=cikar).grid(row=4, column=0, columnspan=2, pady=10)


    def personel_cikar():
        def cikar():
            ad = entry_ad.get()
            soyad = entry_soyad.get()
            conn = sqlite3.connect('15')
            c = conn.cursor()
            c.execute("DELETE from personel WHERE ad=? AND soyad=?", (ad, soyad))
            conn.commit()
            conn.close()

            messagebox.showinfo("Başarılı", "Personel başarıyla çıkarıldı.")
            personel_cikar_window.destroy()

        personel_cikar_window = tk.Toplevel(root)
        personel_cikar_window.title("Personel Çıkar")

        tk.Label(personel_cikar_window, text="Ad:").grid(row=0, column=0)
        entry_ad = tk.Entry(personel_cikar_window)
        entry_ad.grid(row=0, column=1)

        tk.Label(personel_cikar_window, text="Soyad:").grid(row=1, column=0)
        entry_soyad = tk.Entry(personel_cikar_window)
        entry_soyad.grid(row=1, column=1)

        tk.Button(personel_cikar_window, text="Çıkar", command=cikar).grid(row=2, column=0, columnspan=2, pady=10)

        
    def etkinlik_ekle():
        etkinlik_ekle_window = tk.Toplevel(root)
        etkinlik_ekle_window.title("Etkinlik Ekle")

        # Create etkinlik table if not exist when etkinlik_ekle is called
        conn = sqlite3.connect('15')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS etkinlik (
           baslangic_tarihi TEXT,
           bitis_tarihi TEXT,
           ad TEXT,
           soyad TEXT,
           mazeret1 TEXT, 
           gorev1 TEXT, 
           kurs1 TEXT, 
           yillik_izin1 TEXT, 
           hatud1 TEXT, 
           hatua1 TEXT, 
           nobet1 TEXT,
           mazeret REAL, 
           gorev REAL, 
           kurs REAL, 
           yillik_izin REAL, 
           hatud REAL, 
           hatua REAL, 
           nobet REAL,
           garnizon_terk REAL,
           gunu_birlik_izin_yarim_gun REAL,
           gunu_birlik_izin_tam_gun REAL,
           garnizon_terk1 TEXT,
           gunu_birlik_izin_yarim_gun1 TEXT,
           gunu_birlik_izin_tam_gun1 TEXT,
           rbayram REAL,
           kbayram REAL,
           rbayram1 TEXT,
           kbayram1 TEXT,
           kursnob REAL,
           kursnob1 TEXT
        )''')
        conn.close()

        def etkinlik_kaydet():
            conn = sqlite3.connect('15')
            c = conn.cursor()

            ad = entry_ad.get()
            soyad = entry_soyad.get()
            baslangic_tarihi = entry_date.get()
            bitis_tarihi = entry_bitis_tarihi.get()
            etkinlik_tipi = combobox_etkinlik_tipi.get()

            c.execute("SELECT id FROM personel WHERE ad=? AND soyad=?", (ad, soyad))
            personel_id = c.fetchone()
            if personel_id is not None:
               personel_id = personel_id[0]
            else:
               print("Hata: Personel bulunamadı")
               return

            baslangic_date = datetime.datetime.strptime(baslangic_tarihi, "%Y-%m-%d")
            bitis_date = datetime.datetime.strptime(bitis_tarihi, "%Y-%m-%d")
            delta = (bitis_date - baslangic_date).days + 1

            # Check if the etkinlik overlaps with any existing etkinlik
            c.execute("SELECT baslangic_tarihi, bitis_tarihi, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1, kursnob1 FROM etkinlik WHERE ad=? AND soyad=?", (ad, soyad))
            existing_etkinlikler = c.fetchall()
            for existing_etkinlik in existing_etkinlikler:
                existing_baslangic, existing_bitis, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1, kursnob1 = existing_etkinlik
                existing_baslangic = datetime.datetime.strptime(existing_baslangic, "%Y-%m-%d")
                existing_bitis = datetime.datetime.strptime(existing_bitis, "%Y-%m-%d")
                if etkinlikler_cakisiyor_mu(baslangic_date, bitis_date, existing_baslangic, existing_bitis):
                    # Find the etkinlik type
                    etkinlik_types = [mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1, kursnob1]
                    etkinlik_type = ['mazeret', 'gorev', 'kurs', 'yillik_izin', 'hatud', 'hatua', 'garnizon_terk', 'rbayram', 'kbayram', 'kursnob1'][[i for i in range(len(etkinlik_types)) if etkinlik_types[i] is not None][0]]  # get the corresponding etkinlik type
                    # Calculate the remaining days
                    remaining_days = (existing_bitis - datetime.datetime.now()).days
                    messagebox.showerror("Hata", f"{etkinlik_type.capitalize()} etkinliği {existing_baslangic.strftime('%d-%m-%Y')} ve {existing_bitis.strftime('%d-%m-%Y')} tarihleri arasında mevcut ve çakışıyor. Bu etkinliğin bitmesine daha {remaining_days} gün var.")
                    return

            # Save the etkinlik to the etkinlik table
            c.execute("INSERT INTO etkinlik (baslangic_tarihi, bitis_tarihi, ad, soyad, {}) VALUES (?, ?, ?, ?, ?)".format(etkinlik_tipi), (baslangic_tarihi, bitis_tarihi, ad, soyad, baslangic_tarihi))

            # Update the personel table
            etkinlik_tipi_without_number = etkinlik_tipi[:-1]  # removes the last character '1' from etkinlik_tipi
            c.execute("UPDATE personel SET {} = {} + ? WHERE id = ?".format(etkinlik_tipi_without_number, etkinlik_tipi_without_number), (delta, personel_id))
            try:
                conn.commit()
                print("Kaydedildi")
                messagebox.showinfo("Başarılı", "Etkinlik başarıyla kaydedildi.")
            except Exception as e:
                   messagebox.showerror("Hata", f"Etkinlik kaydedilirken hata oluştu: {e}")
            finally:
                    conn.close()
                    etkinlik_ekle_window.destroy()
                 
        tk.Label(etkinlik_ekle_window, text="Baslangıç Tarihi (YYYY-MM-DD):").grid(row=0, column=0)
        entry_date = tk.Entry(etkinlik_ekle_window)
        entry_date.grid(row=0, column=1)
        
        tk.Label(etkinlik_ekle_window, text="Bitiş Tarihi (YYYY-MM-DD):").grid(row=1, column=0)
        entry_bitis_tarihi = tk.Entry(etkinlik_ekle_window)
        entry_bitis_tarihi.grid(row=1, column=1)


        tk.Label(etkinlik_ekle_window, text="Ad:").grid(row=2, column=0)
        entry_ad = tk.Entry(etkinlik_ekle_window)
        entry_ad.grid(row=2, column=1)
        
        tk.Label(etkinlik_ekle_window, text="Soyad:").grid(row=3, column=0)
        entry_soyad = tk.Entry(etkinlik_ekle_window)
        entry_soyad.grid(row=3, column=1)

        
        tk.Label(etkinlik_ekle_window, text="Etkinlik Tipi (Mazeret/Görev/Kurs/Kursnob/Yıllık İzin/Hatu D./Hatu A./garnizon_terk1/rbayram1/kbayram1):").grid(row=4, column=0)
        combobox_etkinlik_tipi = ttk.Combobox(etkinlik_ekle_window)
        combobox_etkinlik_tipi['values'] = ('mazeret1', 'gorev1', 'kurs1' , 'yillik_izin1', 'hatud1', 'hatua1','garnizon_terk1','rbayram1','kbayram1','kursnob1',)
        combobox_etkinlik_tipi.grid(row=4, column=1)

        tk.Button(etkinlik_ekle_window, text="Kaydet", command=etkinlik_kaydet).grid(row=5, column=0, columnspan=2, pady=10)
        
    
    def etkinlik_goruntule():
        etkinlik_goruntule_window = tk.Toplevel(root)
        etkinlik_goruntule_window.title("Etkinlikleri Görüntüle")

        # Yıl ve ay giriş kutucukları ve Listele butonu
        tk.Label(etkinlik_goruntule_window, text="Yıl:").pack()
        entry_yil = tk.Entry(etkinlik_goruntule_window)
        entry_yil.pack()

        tk.Label(etkinlik_goruntule_window, text="Ay:").pack()
        entry_ay = tk.Entry(etkinlik_goruntule_window)
        entry_ay.pack()

        # Frame setup
        frame = tk.Frame(etkinlik_goruntule_window)
        frame.pack(pady=10)

        # Treeview setup
        tree = ttk.Treeview(frame, columns=('Baslangic', 'Bitis', 'Ad', 'Soyad', 'Mazeret', 'Gorev', 'Kurs', 'Yillik Izin', 'HatUD', 'HatUA', 'Nobet', 'garnizon_terk', 'rbayram', 'kbayram'), show='headings')

        # Here set each column's width and alignment
        tree.column('Baslangic', width=100, anchor='center')
        tree.column('Bitis', width=100, anchor='center')
        tree.column('Ad', width=100, anchor='center')
        tree.column('Soyad', width=100, anchor='center')
        tree.column('Mazeret', width=100, anchor='center')
        tree.column('Gorev', width=100, anchor='center')
        tree.column('Kurs', width=100, anchor='center')
        tree.column('KursNöbet', width=100, anchor='center')
        tree.column('Yillik Izin', width=100, anchor='center')
        tree.column('HatUD', width=100, anchor='center')
        tree.column('HatUA', width=100, anchor='center')
        tree.column('Nobet', width=100, anchor='center')
        tree.column('garnizon_terk', width=100, anchor='center')
        tree.column('rbayram', width=100, anchor='center')
        tree.column('kbayram', width=100, anchor='center')

        tree.heading('Baslangic', text='Baslangic')
        tree.heading('Bitis', text='Bitis')
        tree.heading('Ad', text='Ad')
        tree.heading('Soyad', text='Soyad')
        tree.heading('Mazeret', text='Mazeret')
        tree.heading('Gorev', text='Gorev')
        tree.heading('Kurs', text='Kurs')
        tree.heading('KursNöbet', text='KursNöbet')
        tree.heading('Yillik Izin', text='Yillik Izin')
        tree.heading('HatUD', text='HatUD')
        tree.heading('HatUA', text='HatUA')
        tree.heading('Nobet', text='Nobet')
        tree.heading('garnizon_terk', text='Garnizonterk')
        tree.heading('rbayram', text='Rbayram')
        tree.heading('kbayram', text='Kbayram')
        # Scrolling bars setup
        yscrollbar = ttk.Scrollbar(frame, orient='vertical', command=tree.yview)
        xscrollbar = ttk.Scrollbar(frame, orient='horizontal', command=tree.xview) 
        tree.configure(xscrollcommand=xscrollbar.set, yscrollcommand=yscrollbar.set)

        tree.pack(side='left', fill='both', expand=True)
        yscrollbar.pack(side='right', fill='y')
        xscrollbar.pack(side='bottom', fill='x')
        def listele_etkinlik():
            conn = sqlite3.connect('15')
            yil = entry_yil.get()
            ay = entry_ay.get()

            c = conn.cursor()
            c.execute("SELECT baslangic_tarihi, bitis_tarihi, ad, soyad, mazeret1, gorev1, kurs1, kursnob1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk1, rbayram1, kbayram1 FROM etkinlik WHERE baslangic_tarihi LIKE ?", (f"{yil}-{ay}-%",))

            etkinlikler = c.fetchall()

            for etkinlik in etkinlikler:
                etkinlik = tuple('Yoktur' if i is None else i for i in etkinlik)  # None values are changed to 'Yoktur'
                tree.insert('', 'end', values=etkinlik)
            conn.close()
       
        tk.Button(etkinlik_goruntule_window, text="Listele", command=listele_etkinlik).pack(pady=10)
           
        
    

    if __name__ == "__main__":
      main("Faaliyet Oluşturma Programı")
    
nobet_list = []

def nobetci_personelleri_goruntule():
    def show_nobetci_personelleri(date1, date2, n, text_area):
        global nobet_list  # 'nobet_list' global değişkenini tanımla
        nobet_list = []  # 'nobet_list' değişkenini temizle
        try:
            date1 = datetime.datetime.strptime(date1, '%Y-%m-%d').date()
            date2 = datetime.datetime.strptime(date2, '%Y-%m-%d').date()
        except ValueError:
            text_area.delete(1.0, tk.END)
            text_area.insert(tk.END, f"{n} personel seçildi.\n\n")
            text_area.insert(tk.END, "Hatalı tarih formatı! Lütfen YYYY-MM-DD biçiminde girin.")
            return

        temp_conn, temp_c = yeni_veri_tabani()

        text_area.delete(1.0, tk.END)
        date_range = [date1 + datetime.timedelta(days=x) for x in range((date2 - date1).days + 1)]

        # Get the list of selected nobetci personeller for the entire date range
        selected_nobetci_days = yeni_nobetci_personelleri_ara(conn, date1, date2, n)
        nobet_list.extend(selected_nobetci_days)
        
        for i, current_date in enumerate(date_range):
            available_nobetci = []
            for personel in selected_nobetci_days[i]:
                etkinlik_tarihleri = get_etkinlik_tarihleri(temp_conn, personel[1], personel[2])
                if current_date not in etkinlik_tarihleri:
                   available_nobetci.append(personel)

            if available_nobetci:
                text_area.insert(tk.END, f"{current_date}\n")
                for j, personel in enumerate(available_nobetci, 1):
                    text_area.insert(tk.END, f"{j}. Nöbetçi Personel: {personel[1]} {personel[2]} (Puan: {personel[6]}, Mazeret: {personel[7]})\n")
                text_area.insert(tk.END, "\n")
                text_area.see(tk.END)
                text_area.update_idletasks()


        temp_conn.close()

    nobetci_personelleri_window = tk.Toplevel()
    nobetci_personelleri_window.title("Nöbet Oluşturma Ekranı")

    tk.Label(nobetci_personelleri_window, text="Başlangıç Tarihi (YYYY-MM-DD):").grid(row=1, column=0)
    entry_date1 = tk.Entry(nobetci_personelleri_window)
    entry_date1.grid(row=1, column=1)

    tk.Label(nobetci_personelleri_window, text="Bitiş Tarihi (YYYY-MM-DD):").grid(row=2, column=0)
    entry_date2 = tk.Entry(nobetci_personelleri_window)
    entry_date2.grid(row=2, column=1)

    tk.Label(nobetci_personelleri_window, text="Nöbetçi Personel Sayısı:").grid(row=3, column=0)
    entry_n = tk.Entry(nobetci_personelleri_window)
    entry_n.grid(row=3, column=1)

    tk.Label(nobetci_personelleri_window, text="Nöbetçi Personel Kombinasyonları:").grid(row=4, column=0, columnspan=2)
    text_area = tk.Text(nobetci_personelleri_window, wrap=tk.WORD, width=50, height=30)
    text_area.grid(row=5, column=0, columnspan=2)
    scroll_bar = tk.Scrollbar(nobetci_personelleri_window, command=text_area.yview)
    scroll_bar.grid(row=5, column=2, sticky='ns')
    text_area.config(yscrollcommand=scroll_bar.set)

    tk.Button(nobetci_personelleri_window, text="Nöbet Oluştur", command=lambda: show_nobetci_personelleri(
        entry_date1.get(),
        entry_date2.get(),
        int(entry_n.get()),
        text_area
    )).grid(row=6, column=0, columnspan=4, pady=15)

    tk.Button(nobetci_personelleri_window, text="Nöbetleri Kaydet", command=lambda: (
    kaydet_nobet_liste(nobet_list),
    guncelle_personel()
    )).grid(row=6, column=1, columnspan=4, pady=15)


def gorev_ata():
    def goreve_gonder():
        baslangic_tarihi = baslangic_entry.get()
        bitis_tarihi = bitis_entry.get()

        c.execute("SELECT id, ad, soyad, gorev, yillik_izin1 FROM personel ORDER BY gorev ASC LIMIT ?", (kisi_sayisi_entry.get(),))
        personeller = c.fetchall()

        for personel in personeller:
            yillik_izin1 = personel[4]
            if yillik_izin1 and yillik_izin1 not in (baslangic_tarihi, bitis_tarihi):
                c.execute("UPDATE personel SET gorev=gorev+1 WHERE id=?", (personel[0],))
                personel_tree.insert('', 'end', values=(personel[1], personel[2], personel[3]))
            else:
                messagebox.showwarning("Çakışan tarihler", f"{personel[1]} {personel[2]} adlı personelin izin tarihleri görev tarihleri ile çakışıyor.")

        conn.commit()
    
    gorev_window = tk.Toplevel(root)
    gorev_window.title("Görev Atama")

    conn = sqlite3.connect('15')
    c = conn.cursor()

    baslangic_label = tk.Label(gorev_window, text="Görev başlangıç tarihi (GG.AA.YYYY): ")
    baslangic_label.pack()
    baslangic_entry = tk.Entry(gorev_window)
    baslangic_entry.pack()

    bitis_label = tk.Label(gorev_window, text="Görev bitiş tarihi (GG.AA.YYYY): ")
    bitis_label.pack()
    bitis_entry = tk.Entry(gorev_window)
    bitis_entry.pack()

    kisi_sayisi_label = tk.Label(gorev_window, text="Göreve gönderilecek kişi sayısı: ")
    kisi_sayisi_label.pack()
    kisi_sayisi_entry = tk.Entry(gorev_window)
    kisi_sayisi_entry.pack()

    goreve_gonder_button = tk.Button(gorev_window, text="Göreve gönder", command=goreve_gonder)
    goreve_gonder_button.pack()

    personel_tree = ttk.Treeview(gorev_window, columns=('Ad', 'Soyad', 'Görev sayısı'), show='headings')
    personel_tree.heading('Ad', text='Ad')
    personel_tree.heading('Soyad', text='Soyad')
    personel_tree.heading('Görev sayısı', text='Görev sayısı')

    personel_tree.pack(padx=10, pady=10)
    root.mainloop()

if __name__ == "__main__":
    
    root = tk.Tk("Faaliyet Oluşturma Programı")
    root.geometry("400x400")
    current_year = dt.datetime.now().year
    root.title(f"Faaliyet Planlama Programı - {current_year}")
    menubar = tk.Menu(root)
    root.config(menu=menubar)
    label1 = tk.Label(root, text="JANDARMA ARAMA KURTARMA NÖBET PROGRAMI.", font=("Arial", 12), bg="red")
    label1.pack()
    img = Image.open(r"C:\Users\Esra\Desktop\nöbet projesi\JÖAK.jpg")


    resim = ImageTk.PhotoImage(img)
    label2 = tk.Label(root, image=resim)
    label2.image = resim  # referansı saklayın, aksi takdirde çöp toplayıcı tarafından silinebilir
    label2.pack()

    personel_menu = tk.Menu(menubar, tearoff=0)
    def yeni_personel_ekle():
        def personel_kaydet():
            ad = entry_ad.get()
            soyad = entry_soyad.get()
            rutbe = entry_rutbe.get()
            cinsiyet = combobox_cinsiyet.get()
            sofor = combobox_sofor.get()
            puan = float(entry_puan.get())
            mazeret = int(entry_mazeret.get())
            gorev = int(entry_gorev.get())
            kurs = int(entry_kurs.get())       
            nobet = int(entry_nobet.get())
            yillik_izin = int(entry_yillik_izin.get())
            hatud = int(entry_hatud.get())
            hatua = int(entry_hatua.get())
            conn = sqlite3.connect('15')
            c = conn.cursor()
            c.execute("INSERT INTO personel (ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (ad, soyad, rutbe, cinsiyet, sofor, puan, mazeret, gorev, kurs, yillik_izin, hatud, hatua, nobet))
            conn.commit()
            conn.close()

            messagebox.showinfo("Başarılı", "Personel başarıyla eklendi.")
            personel_ekle_window.destroy()

        personel_ekle_window = tk.Toplevel(root)
        personel_ekle_window.title("Yeni Personel Ekle")

        tk.Label(personel_ekle_window, text="Ad:").grid(row=0, column=0)
        entry_ad = tk.Entry(personel_ekle_window)
        entry_ad.grid(row=0, column=1)

        tk.Label(personel_ekle_window, text="Soyad:").grid(row=1, column=0)
        entry_soyad = tk.Entry(personel_ekle_window)
        entry_soyad.grid(row=1, column=1)

        tk.Label(personel_ekle_window, text="Rütbe:").grid(row=2, column=0)
        entry_rutbe = tk.Entry(personel_ekle_window)
        entry_rutbe.grid(row=2, column=1)

        tk.Label(personel_ekle_window, text="Cinsiyet:").grid(row=3, column=0)
        combobox_cinsiyet = ttk.Combobox(personel_ekle_window)
        combobox_cinsiyet['values'] = ('Erkek', 'Kadın')
        combobox_cinsiyet.grid(row=3, column=1)

        tk.Label(personel_ekle_window, text="Şöför mü:").grid(row=4, column=0)
        combobox_sofor = ttk.Combobox(personel_ekle_window)
        combobox_sofor['values'] = ('Evet', 'Hayır')
        combobox_sofor.grid(row=4, column=1)

        tk.Label(personel_ekle_window, text="Puan:").grid(row=5, column=0)
        entry_puan = tk.Entry(personel_ekle_window)
        entry_puan.grid(row=5, column=1)

        tk.Label(personel_ekle_window, text="Mazeret:").grid(row=6, column=0)
        entry_mazeret = tk.Entry(personel_ekle_window)
        entry_mazeret.grid(row=6, column=1)

        tk.Label(personel_ekle_window, text="Görev:").grid(row=7, column=0)
        entry_gorev = tk.Entry(personel_ekle_window)
        entry_gorev.grid(row=7, column=1)

        tk.Label(personel_ekle_window, text="Kurs:").grid(row=8, column=0)
        entry_kurs = tk.Entry(personel_ekle_window)
        entry_kurs.grid(row=8, column=1)
        
        tk.Label(personel_ekle_window, text="Nöbet:").grid(row=9, column=0)
        entry_nobet = tk.Entry(personel_ekle_window)
        entry_nobet.grid(row=9, column=1)

        tk.Label(personel_ekle_window, text="Yıllık İzin:").grid(row=10, column=0)
        entry_yillik_izin = tk.Entry(personel_ekle_window)
        entry_yillik_izin.grid(row=10, column=1)

        tk.Label(personel_ekle_window, text="Hatu D.:").grid(row=11, column=0)
        entry_hatud = tk.Entry(personel_ekle_window)
        entry_hatud.grid(row=11, column=1)

        tk.Label(personel_ekle_window, text="Hatu A.:").grid(row=12, column=0)
        entry_hatua = tk.Entry(personel_ekle_window)
        entry_hatua.grid(row=12, column=1)

        tk.Button(personel_ekle_window, text="Kaydet", command=personel_kaydet).grid(row=13, column=0, columnspan=2, pady=10)

    def etkinlik_ekle():
        etkinlik_ekle_window = tk.Toplevel(root)
        etkinlik_ekle_window.title("Etkinlik Ekle")

        # Create etkinlik table if not exist when etkinlik_ekle is called
        conn = sqlite3.connect('15')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS etkinlik (
           baslangic_tarihi TEXT,
           bitis_tarihi TEXT,
           ad TEXT,
           soyad TEXT,
           mazeret1 TEXT, 
           gorev1 TEXT, 
           kurs1 TEXT, 
           yillik_izin1 TEXT, 
           hatud1 TEXT, 
           hatua1 TEXT, 
           nobet1 TEXT,
           mazeret REAL, 
           gorev REAL, 
           kurs REAL, 
           yillik_izin REAL, 
           hatud REAL, 
           hatua REAL, 
           nobet REAL,
           garnizon_terk REAL,
           gunu_birlik_izin_yarim_gun REAL,
           gunu_birlik_izin_tam_gun REAL,
           garnizon_terk1 TEXT,
           gunu_birlik_izin_yarim_gun1 TEXT,
           gunu_birlik_izin_tam_gun1 TEXT,
           rbayram REAL,
           kbayram REAL,
           rbayram1 TEXT,
           kbayram1 TEXT,
           kursnob REAL,
           kursnob1 TEXT
        )''')
        conn.close()

        def etkinlik_kaydet():
            conn = sqlite3.connect('15')
            c = conn.cursor()

            ad = entry_ad.get()
            soyad = entry_soyad.get()
            baslangic_tarihi = entry_date.get()
            bitis_tarihi = entry_bitis_tarihi.get()
            etkinlik_tipi = combobox_etkinlik_tipi.get()

            c.execute("SELECT id FROM personel WHERE ad=? AND soyad=?", (ad, soyad))
            personel_id = c.fetchone()
            if personel_id is not None:
               personel_id = personel_id[0]
            else:
               print("Hata: Personel bulunamadı")
               return

            baslangic_date = datetime.datetime.strptime(baslangic_tarihi, "%Y-%m-%d")
            bitis_date = datetime.datetime.strptime(bitis_tarihi, "%Y-%m-%d")
            delta = (bitis_date - baslangic_date).days + 1

            # Check if the etkinlik overlaps with any existing etkinlik
            c.execute("SELECT baslangic_tarihi, bitis_tarihi, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1, kursnob1 FROM etkinlik WHERE ad=? AND soyad=?", (ad, soyad))
            existing_etkinlikler = c.fetchall()
            for existing_etkinlik in existing_etkinlikler:
                existing_baslangic, existing_bitis, mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1, kursnob1 = existing_etkinlik
                existing_baslangic = datetime.datetime.strptime(existing_baslangic, "%Y-%m-%d")
                existing_bitis = datetime.datetime.strptime(existing_bitis, "%Y-%m-%d")
                if etkinlikler_cakisiyor_mu(baslangic_date, bitis_date, existing_baslangic, existing_bitis):
                    # Find the etkinlik type
                    etkinlik_types = [mazeret1, gorev1, kurs1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1, kursnob1]
                    etkinlik_type = ['mazeret', 'gorev', 'kurs', 'yillik_izin', 'hatud', 'hatua', 'garnizon_terk', 'rbayram', 'kbayram', 'kursnob1'][[i for i in range(len(etkinlik_types)) if etkinlik_types[i] is not None][0]]  # get the corresponding etkinlik type
                    # Calculate the remaining days
                    remaining_days = (existing_bitis - datetime.datetime.now()).days
                    messagebox.showerror("Hata", f"{etkinlik_type.capitalize()} etkinliği {existing_baslangic.strftime('%d-%m-%Y')} ve {existing_bitis.strftime('%d-%m-%Y')} tarihleri arasında mevcut ve çakışıyor. Bu etkinliğin bitmesine daha {remaining_days} gün var.")
                    return

            # Save the etkinlik to the etkinlik table
            c.execute("INSERT INTO etkinlik (baslangic_tarihi, bitis_tarihi, ad, soyad, {}) VALUES (?, ?, ?, ?, ?)".format(etkinlik_tipi), (baslangic_tarihi, bitis_tarihi, ad, soyad, delta))
            # Update the personel table
            etkinlik_tipi_without_number = etkinlik_tipi[:-1]  # removes the last character '1' from etkinlik_tipi
            c.execute("UPDATE personel SET {} = {} + ? WHERE id = ?".format(etkinlik_tipi_without_number, etkinlik_tipi_without_number), (delta, personel_id))
            try:
                conn.commit()
                print("Kaydedildi")
                messagebox.showinfo("Başarılı", "Etkinlik başarıyla kaydedildi.")
            except Exception as e:
                   messagebox.showerror("Hata", f"Etkinlik kaydedilirken hata oluştu: {e}")
            finally:
                    conn.close()
                    etkinlik_ekle_window.destroy()
                 
        tk.Label(etkinlik_ekle_window, text="Baslangıç Tarihi (YYYY-MM-DD):").grid(row=0, column=0)
        entry_date = tk.Entry(etkinlik_ekle_window)
        entry_date.grid(row=0, column=1)
        
        tk.Label(etkinlik_ekle_window, text="Bitiş Tarihi (YYYY-MM-DD):").grid(row=1, column=0)
        entry_bitis_tarihi = tk.Entry(etkinlik_ekle_window)
        entry_bitis_tarihi.grid(row=1, column=1)


        tk.Label(etkinlik_ekle_window, text="Ad:").grid(row=2, column=0)
        entry_ad = tk.Entry(etkinlik_ekle_window)
        entry_ad.grid(row=2, column=1)
        
        tk.Label(etkinlik_ekle_window, text="Soyad:").grid(row=3, column=0)
        entry_soyad = tk.Entry(etkinlik_ekle_window)
        entry_soyad.grid(row=3, column=1)

        
        tk.Label(etkinlik_ekle_window, text="Etkinlik Tipi (Mazeret/Görev/Kurs/Kursnob/Yıllık İzin/Hatu D./Hatu A./garnizon_terk1/rbayram1/kbayram1):").grid(row=4, column=0)
        combobox_etkinlik_tipi = ttk.Combobox(etkinlik_ekle_window)
        combobox_etkinlik_tipi['values'] = ('mazeret1', 'gorev1', 'kurs1' , 'yillik_izin1', 'hatud1', 'hatua1','garnizon_terk1','rbayram1','kbayram1','kursnob1',)
        combobox_etkinlik_tipi.grid(row=4, column=1)

        tk.Button(etkinlik_ekle_window, text="Kaydet", command=etkinlik_kaydet).grid(row=5, column=0, columnspan=2, pady=10)
    
    
    

    def etkinlik_cikar():
        def cikar():
            ad = entry_ad.get()
            soyad = entry_soyad.get()
            baslangic_tarihi = entry_baslangic_tarihi.get()
            bitis_tarihi = entry_bitis_tarihi.get()

            conn = sqlite3.connect('15')
            c = conn.cursor()

             # get the etkinlik type and duration from the etkinlik table before deleting
            c.execute("SELECT mazeret1, gorev1, kurs1, kursnob1, yillik_izin1, hatud1, hatua1, garnizon_terk1, rbayram1, kbayram1 FROM etkinlik WHERE ad=? AND soyad=? AND baslangic_tarihi=? AND bitis_tarihi=?", (ad, soyad, baslangic_tarihi, bitis_tarihi))
            etkinlik = c.fetchone()
            etkinlik_type = [i for i in range(len(etkinlik)) if etkinlik[i] is not None][0]  # index of the non-None value
            etkinlik_duration = etkinlik[etkinlik_type]
            etkinlik_type = ['mazeret', 'gorev', 'kurs', 'kursnob', 'yillik_izin', 'hatud', 'hatua', 'garnizon_terk', 'rbayram', 'kbayram'][etkinlik_type]  # get the corresponding etkinlik type

            c.execute("DELETE from etkinlik WHERE ad=? AND soyad=? AND baslangic_tarihi=? AND bitis_tarihi=?", (ad, soyad, baslangic_tarihi, bitis_tarihi))

            # reduce the duration of the etkinlik from the personel table
            c.execute("UPDATE personel SET {} = {} - ? WHERE ad = ? AND soyad = ?".format(etkinlik_type, etkinlik_type), (etkinlik_duration, ad, soyad))

            conn.commit()
            conn.close()

            messagebox.showinfo("Başarılı", "Etkinlik başarıyla çıkarıldı.")
            etkinlik_cikar_window.destroy()

    


        etkinlik_cikar_window = tk.Toplevel(root)
        etkinlik_cikar_window.title("Etkinlik Çıkar")

        tk.Label(etkinlik_cikar_window, text="Ad:").grid(row=0, column=0)
        entry_ad = tk.Entry(etkinlik_cikar_window)
        entry_ad.grid(row=0, column=1)

        tk.Label(etkinlik_cikar_window, text="Soyad:").grid(row=1, column=0)
        entry_soyad = tk.Entry(etkinlik_cikar_window)
        entry_soyad.grid(row=1, column=1)

        tk.Label(etkinlik_cikar_window, text="Başlangıç Tarihi (YYYY-MM-DD):").grid(row=2, column=0)
        entry_baslangic_tarihi = tk.Entry(etkinlik_cikar_window)
        entry_baslangic_tarihi.grid(row=2, column=1)

        tk.Label(etkinlik_cikar_window, text="Bitiş Tarihi (YYYY-MM-DD):").grid(row=3, column=0)
        entry_bitis_tarihi = tk.Entry(etkinlik_cikar_window)
        entry_bitis_tarihi.grid(row=3, column=1)

        tk.Button(etkinlik_cikar_window, text="Çıkar", command=cikar).grid(row=4, column=0, columnspan=2, pady=10)

    def personel_cikar():
        def cikar():
            ad = entry_ad.get()
            soyad = entry_soyad.get()
            conn = sqlite3.connect('15')
            c = conn.cursor()
            c.execute("DELETE from personel WHERE ad=? AND soyad=?", (ad, soyad))
            conn.commit()
            conn.close()

            messagebox.showinfo("Başarılı", "Personel başarıyla çıkarıldı.")
            personel_cikar_window.destroy()

        personel_cikar_window = tk.Toplevel(root)
        personel_cikar_window.title("Personel Çıkar")

        tk.Label(personel_cikar_window, text="Ad:").grid(row=0, column=0)
        entry_ad = tk.Entry(personel_cikar_window)
        entry_ad.grid(row=0, column=1)

        tk.Label(personel_cikar_window, text="Soyad:").grid(row=1, column=0)
        entry_soyad = tk.Entry(personel_cikar_window)
        entry_soyad.grid(row=1, column=1)

        tk.Button(personel_cikar_window, text="Çıkar", command=cikar).grid(row=2, column=0, columnspan=2, pady=10)
    def bayram_goruntule():
        conn = sqlite3.connect('15')
        c = conn.cursor()

        bayram_window = tk.Toplevel(root)
        bayram_window.title("Özel Günler Listesi")

        frame = tk.Frame(bayram_window)
        frame.pack(padx=10, pady=10)

        tree = ttk.Treeview(frame, columns=('Bayram Adı', 'Başlangıç Tarihi', 'Bitiş Tarihi'), show='headings')
        tree.heading('Bayram Adı', text='Bayram Adı')
        tree.heading('Başlangıç Tarihi', text='Başlangıç Tarihi')
        tree.heading('Bitiş Tarihi', text='Bitiş Tarihi')

        tree.column('Bayram Adı', anchor='w')
        tree.column('Başlangıç Tarihi', anchor='w')
        tree.column('Bitiş Tarihi', anchor='w')

        c.execute("SELECT * FROM bayramlar")
        bayramlar = c.fetchall()

        for bayram in bayramlar:
             tree.insert('', 'end', values=(bayram[2], bayram[0], bayram[1]))

        yscrollbar = ttk.Scrollbar(frame, orient='vertical', command=tree.yview)
        xscrollbar = ttk.Scrollbar(frame, orient='horizontal', command=tree.xview)

        tree.configure(xscrollcommand=xscrollbar.set, yscrollcommand=yscrollbar.set)

        tree.grid(row=0, column=0, sticky='nsew')
        yscrollbar.grid(row=0, column=1, sticky='ns')
        xscrollbar.grid(row=1, column=0, sticky='ew')

        frame.grid_rowconfigure(0, weight=1)
        frame.grid_columnconfigure(0, weight=1)

        conn.close()

    def personel_listesi():
          personel_window = tk.Toplevel(root)
          personel_window.title("Personel Listesi")

          conn = sqlite3.connect('15')
          c = conn.cursor()
          c.execute("SELECT * FROM personel")
          personel_list = c.fetchall()
          conn.close()

          frame = tk.Frame(personel_window)
          frame.pack(padx=10, pady=10)

          tree = ttk.Treeview(frame, columns=('Ad', 'Soyad', 'Rütbe', 'Cinsiyet', 'Şöför', 'Puan', 'Mazeret', 'Görev', 'Kurs', 'Yıllık İzin', 'Hatu D.', 'Hatu A.', 'Nöbet'), show='headings')
          tree.heading('Ad', text='Ad')
          tree.heading('Soyad', text='Soyad')
          tree.heading('Rütbe', text='Rütbe')
          tree.heading('Cinsiyet', text='Cinsiyet')
          tree.heading('Şöför', text='Şöför')
          tree.heading('Puan', text='Puan')
          tree.heading('Mazeret', text='Mazeret')
          tree.heading('Görev', text='Görev')
          tree.heading('Kurs', text='Kurs')
          tree.heading('Yıllık İzin', text='Yıllık İzin')
          tree.heading('Hatu D.', text='Hatu D.')
          tree.heading('Hatu A.', text='Hatu A.')
          tree.heading('Nöbet', text='Nöbet')
          tree.column('Ad', anchor='center')
          tree.column('Soyad', anchor='center')
          tree.column('Rütbe', anchor='center')
          tree.column('Cinsiyet', anchor='center')
          tree.column('Puan', anchor='center')
          tree.column('Mazeret', anchor='center')
          tree.column('Görev', anchor='center')
          tree.column('Kurs', anchor='center')
          tree.column('Yıllık İzin', anchor='center')
          tree.column('Hatu D.', anchor='center')
          tree.column('Hatu A.', anchor='center')
          tree.column('Nöbet', anchor='center')

          for personel in personel_list:
              tree.insert('', 'end', values=(personel[1], personel[2], personel[3], personel[4], personel[5], personel[6], personel[7], personel[8], personel[9], personel[10], personel[11], personel[12],personel[13]))

            # Kaydırma çubuklarını oluşturun
          yscrollbar = ttk.Scrollbar(frame, orient='vertical', command=tree.yview)
          xscrollbar = ttk.Scrollbar(frame, orient='horizontal', command=tree.xview)

          # Kaydırma çubuklarını Treeview'a bağlayın
          tree.configure(xscrollcommand=xscrollbar.set, yscrollcommand=yscrollbar.set)

          tree.grid(row=0, column=0, sticky='nsew')
          yscrollbar.grid(row=0, column=1, sticky='ns')
          xscrollbar.grid(row=1, column=0, sticky='ew')

          frame.grid_rowconfigure(0, weight=1)
          frame.grid_columnconfigure(0, weight=1)
    
    def etkinlik_goruntule():
        etkinlik_goruntule_window = tk.Toplevel(root)
        etkinlik_goruntule_window.title("Etkinlikleri Görüntüle")

        # Yıl ve ay giriş kutucukları ve Listele butonu
        tk.Label(etkinlik_goruntule_window, text="Yıl:").pack()
        entry_yil = tk.Entry(etkinlik_goruntule_window)
        entry_yil.pack()

        tk.Label(etkinlik_goruntule_window, text="Ay:").pack()
        entry_ay = tk.Entry(etkinlik_goruntule_window)
        entry_ay.pack()

        # Frame setup
        frame = tk.Frame(etkinlik_goruntule_window)
        frame.pack(pady=10)

        # Treeview setup
        tree = ttk.Treeview(frame, columns=('Baslangic', 'Bitis', 'Ad', 'Soyad', 'Mazeret', 'Gorev', 'Kurs', 'KursNöbet', 'Yillik Izin', 'HatUD', 'HatUA', 'Nobet', 'garnizon_terk', 'rbayram', 'kbayram'), show='headings')

        # Here set each column's width and alignment
        tree.column('Baslangic', width=100, anchor='center')
        tree.column('Bitis', width=100, anchor='center')
        tree.column('Ad', width=100, anchor='center')
        tree.column('Soyad', width=100, anchor='center')
        tree.column('Mazeret', width=100, anchor='center')
        tree.column('Gorev', width=100, anchor='center')
        tree.column('Kurs', width=100, anchor='center')
        tree.column('KursNöbet', width=100, anchor='center')
        tree.column('Yillik Izin', width=100, anchor='center')
        tree.column('HatUD', width=100, anchor='center')
        tree.column('HatUA', width=100, anchor='center')
        tree.column('Nobet', width=100, anchor='center')
        tree.column('garnizon_terk', width=100, anchor='center')
        tree.column('rbayram', width=100, anchor='center')
        tree.column('kbayram', width=100, anchor='center')

        tree.heading('Baslangic', text='Baslangic')
        tree.heading('Bitis', text='Bitis')
        tree.heading('Ad', text='Ad')
        tree.heading('Soyad', text='Soyad')
        tree.heading('Mazeret', text='Mazeret')
        tree.heading('Gorev', text='Gorev')
        tree.heading('Kurs', text='Kurs')
        tree.heading('KursNöbet', text='KursNöbet')
        tree.heading('Yillik Izin', text='Yillik Izin')
        tree.heading('HatUD', text='HatUD')
        tree.heading('HatUA', text='HatUA')
        tree.heading('Nobet', text='Nobet')
        tree.heading('garnizon_terk', text='Garnizonterk')
        tree.heading('rbayram', text='Rbayram')
        tree.heading('kbayram', text='Kbayram')
        # Scrolling bars setup
        yscrollbar = ttk.Scrollbar(frame, orient='vertical', command=tree.yview)
        xscrollbar = ttk.Scrollbar(frame, orient='horizontal', command=tree.xview) 
        tree.configure(xscrollcommand=xscrollbar.set, yscrollcommand=yscrollbar.set)

        tree.pack(side='left', fill='both', expand=True)
        yscrollbar.pack(side='right', fill='y')
        xscrollbar.pack(side='bottom', fill='x')
        def listele_etkinlik():
            conn = sqlite3.connect('15')
            yil = entry_yil.get()
            ay = entry_ay.get()

            c = conn.cursor()
            c.execute("SELECT baslangic_tarihi, bitis_tarihi, ad, soyad, mazeret1, gorev1, kurs1, kursnob1, yillik_izin1, hatud1, hatua1, nobet1, garnizon_terk1, rbayram1, kbayram1 FROM etkinlik WHERE baslangic_tarihi LIKE ?", (f"{yil}-{ay}-%",))

            etkinlikler = c.fetchall()

            for etkinlik in etkinlikler:
                etkinlik = tuple('Yoktur' if i is None else i for i in etkinlik)  # None values are changed to 'Yoktur'
                tree.insert('', 'end', values=etkinlik)
            conn.close()

        tk.Button(etkinlik_goruntule_window, text="Listele", command=listele_etkinlik).pack(pady=10)


   
    def bayram_ekle():  
     def save_bayram():
        conn = sqlite3.connect('15')
        c = conn.cursor()
        bayram_adi = entry_bayram_adi.get()
        bayrambaslangic_tarihi = entry_bayrambaslangic_tarihi.get()
        bayrambitis_tarihi = entry_bayrambitis_tarihi.get()
        c.execute("CREATE TABLE IF NOT EXISTS bayramlar (bayrambaslangic_tarihi TEXT, bayrambitis_tarihi TEXT, bayram_adi TEXT)")
        bayrambaslangic_date = datetime.datetime.strptime(bayrambaslangic_tarihi, "%Y-%m-%d")
        bayrambitis_date = datetime.datetime.strptime(bayrambitis_tarihi, "%Y-%m-%d")
        bayramdelta = (bayrambaslangic_date - bayrambitis_date).days + 1
        # Save bayram to the bayramlar table
        c.execute("INSERT INTO bayramlar (bayrambaslangic_tarihi, bayrambitis_tarihi, bayram_adi) VALUES (?, ?, ?)",
                 (bayrambaslangic_tarihi, bayrambitis_tarihi, bayram_adi))
        try:
            conn.commit()
            print("Kaydedildi")
            messagebox.showinfo("Başarılı", "Bayram başarıyla kaydedildi.")
        except Exception as e:
            messagebox.showerror("Hata", f"Bayram kaydedilirken hata oluştu: {e}")
        finally:
            conn.close()
            bayram_ekle_window.destroy()
     bayram_ekle_window = tk.Tk()
     bayram_ekle_window.title('Özel Günler Ekleme Arayüzü')

     tk.Label(bayram_ekle_window, text="Başlangıç Tarihi (YYYY-MM-DD):").grid(row=0, column=0)
     entry_bayrambaslangic_tarihi = tk.Entry(bayram_ekle_window)
     entry_bayrambaslangic_tarihi.grid(row=0, column=1)

     tk.Label(bayram_ekle_window, text="Bitiş Tarihi (YYYY-MM-DD):").grid(row=1, column=0)
     entry_bayrambitis_tarihi = tk.Entry(bayram_ekle_window)
     entry_bayrambitis_tarihi.grid(row=1, column=1)

     tk.Label(bayram_ekle_window, text="Özel Gün Adı:").grid(row=2, column=0)
     entry_bayram_adi = tk.Entry(bayram_ekle_window)
     entry_bayram_adi.grid(row=2, column=1)

     tk.Button(bayram_ekle_window, text="Kaydet", command=save_bayram).grid(row=3, column=0, columnspan=2, pady=10)
       
    menubar.add_cascade(label="Personel", menu=personel_menu)
    personel_menu.add_command(label="Personel Listesi", command=personel_listesi)
    personel_menu.add_command(label="Yeni Personel Ekle", command=yeni_personel_ekle)
    personel_menu.add_command(label="Personel Çıkart", command=personel_cikar)
    personel_menu.add_command(label="Görev Ata", command=gorev_ata)  # "Görev Ata" komutunu ekleyin

    etkinlik_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Etkinlik", menu=etkinlik_menu)
    etkinlik_menu.add_command(label="Etkinlik Ekle", command=etkinlik_ekle)
    etkinlik_menu.add_command(label="Etkinlik Çıkar", command=etkinlik_cikar)
    etkinlik_menu.add_command(label="Etkinlikleri Görüntüle", command=etkinlik_goruntule)

    nobet_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Nöbet", menu=nobet_menu)
    nobet_menu.add_command(label="Nöbet Oluştur", command=nobetci_personelleri_goruntule)
    
    nobet_menu.add_command(label="Mevcut Nöbet Listesini Görüntüle", command=nobet_listesi_goruntule)

    ozelgun_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Özel Günler", menu=ozelgun_menu)
    ozelgun_menu.add_command(label="Özel Gün Ekle", command=bayram_ekle)
    ozelgun_menu.add_command(label="Bayram Görüntüle", command=bayram_goruntule)

    menubar.add_command(label="Çıkış", command=root.quit)

    root.mainloop()


   
